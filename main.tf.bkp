locals {
  #  subnets             = data.ibm_is_subnet.vpc_subnet
#  subnet_ids          = data.aws_subnet_ids.public
  subnet_ids           = var.subnet_ids_pub
#  sunet_len           = length(local.subnet_ids)
  count               = var.subnet_count_public
#  tags                = tolist(setsubtract(concat(var.tags, ["bastion"]), [""]))
  name                = "${replace(var.label, "/[^a-zA-Z0-9_\\-\\.]/", "")}-${var.label}"
  base_security_group = var.base_security_group != null ? var.base_security_group : data.aws_security_group.bassg.id
  ssh_security_group_rule = var.allow_ssh_from != "" ? [{
    name        = "ssh-i"
    type        = "ingress"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = var.allow_ssh_from
    }, {
    name        = "all-e"
    type        = "egress"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = var.allow_ssh_from
  }] : []
  security_group_rules = concat(local.ssh_security_group_rule, var.security_group_rules)

}

output "mysubnetids" {
value = local.subnet_ids

}

output "mycount" {

  value = local.count

}

/*
data "aws_vpc" "vpc" {
  id = var.vpc_id
}

*/

/*
data "aws_subnet_ids" "public" {
  vpc_id = data.aws_vpc.vpc.id
  filter {
    name   = "tag:tier"
    values = ["public"]
  }
}
*/



/*
data "aws_subnet" "example" {
  for_each = data.aws_subnet_ids.public.ids
  id       = each.value
}

output "subnetids" {

  value = [for s in data.aws_subnet.example : s.id]

}

*/

/*
data "aws_subnet" "vpc_subnet" {
  count = var.vpc_subnet_count

  id = var.vpc_subnets[count.index].id

}

output "myids" {
  value = data.aws_subnet.vpc_subnet
}

data "aws_subnet" "public1" {
 count = length(data.aws_subnet_ids.public)

}
*/

/*
output "pubsubnetid" {
  value = data.aws_subnet_ids.public
}

*/


resource "aws_security_group" "ec2bastion" {
#  name   = "${var.prefix_name}-bas-sg-group"
#  vpc_id = data.aws_vpc.vpc.id
  vpc_id = var.vpc_id

  tags = {
    Name = "${var.prefix_name}-bas-sg-group"
  }
}


data "aws_security_group" "bassg" {
  id = aws_security_group.ec2bastion.id
}

resource "aws_security_group_rule" "addSGrule" {

  count             = length(local.security_group_rules)
  security_group_id = local.base_security_group
  type              = local.security_group_rules[count.index]["type"]
  from_port         = lookup(local.security_group_rules[count.index], "from_port", null)
  to_port           = lookup(local.security_group_rules[count.index], "to_port", null)
  protocol          = lookup(local.security_group_rules[count.index], "protocol", null)
  cidr_blocks       = lookup(local.security_group_rules[count.index], "cidr_blocks", null)
  #  ip_version        = lookup(local.security_group_rules[count.index], "ip_version", null)

}



module "bastion1" {
  #  source = "github.com/cloud-native-toolkit/terraform-ibm-vpc-vsi.git?ref=v1.11.0"
#  source = "github.com/cloud-native-toolkit/terraform-aws-ec2.git"
   source =  "/Users/sivasaivm/Documents/MyData/SivasailamV/Projects/CloudNative/software-everywhere/ec2/ec2-dev-v1/terraform-aws-ec2"
  subnet_count_public     = var.subnet_count_public

  ami_id                  = var.ami_id
  subnet_ids_pub          = var.subnet_ids_pub
  
  instance_type           = var.instance_type
  pri_instance_monitoring = var.pri_instance_monitoring
  init_script             = var.init_script != "" ? var.init_script : file("${path.module}/scripts/init-jump-server.sh")
  ssh_key                 = var.ssh_key
  publicIP                = var.publicIP
  #  vpc_security_group_ids  = ["${aws_security_group.ec2bastion.id}"]
  #   vpc_security_group_ids  = ["${aws_security_group.bassg.id}"]
  vpc_id = var.vpc_id
  #  count                       = local.sunet_len
  #  subnet_id                   = element(local.subnet_ids, count.index)

  #  subnet_id                   = data.aws_subnet.example
  #  monitoring                  = var.pri_instance_monitoring
  #  user_data                   = var.init_script != "" ? var.init_script : file("${path.module}/scripts/init-script-ubuntu.sh")

  #  key_name                    = var.ssh_key
  #  associate_public_ip_address = var.publicIP
  #root_block_device {
  #  delete_on_termination = true
  #  encrypted             = var.root_block_device_encrypted
  #     kms_key_id            = <Amazon Resource Name (ARN) of the KMS Key to use>
  #   volume_size = var.root_volume_size
  #   volume_type = var.root_volume_type
  # }

  #  tags = {
  #    "Name"    = "${format("%s-%s-%02s", var.prefix_name, var.label)}"
  #    "project" = "swe"
  #  }
}

